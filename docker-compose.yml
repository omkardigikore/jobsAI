# docker-compose.yml
version: '3.8'

services:
  # API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: uvicorn config.asgi:app --host 0.0.0.0 --port 8000
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - REDIS_HOST=host.docker.internal
      - REDIS_PORT=6379
      - REDIS_URL=redis://host.docker.internal:6379/0
    depends_on:
      - db
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    networks:
      - job_bot_network

  # Telegram Bot
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    command: python -m bot.run
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - REDIS_HOST=host.docker.internal
      - REDIS_PORT=6379
      - REDIS_URL=redis://host.docker.internal:6379/0
    depends_on:
      - api
      - db
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    networks:
      - job_bot_network

  # Celery Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A config.celery worker --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - REDIS_HOST=host.docker.internal
      - REDIS_PORT=6379
      - REDIS_URL=redis://host.docker.internal:6379/0
    depends_on:
      - db
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    networks:
      - job_bot_network

  # Celery Beat (for scheduled tasks)
  beat:
    build:
      context: .
      dockerfile: Dockerfile
    # Updated command with proper Python path
    command: bash -c "cd /app && PYTHONPATH=/app celery -A config.celery beat --loglevel=info"
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - REDIS_HOST=host.docker.internal
      - REDIS_PORT=6379
      - REDIS_URL=redis://host.docker.internal:6379/0
    depends_on:
      - db
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    networks:
      - job_bot_network

  # PostgreSQL Database
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-job_bot_db}
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - job_bot_network

  # Adminer for database management (optional)
  adminer:
    image: adminer
    ports:
      - "8080:8080"
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - job_bot_network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/usr/share/nginx/html/static
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - job_bot_network

volumes:
  postgres_data:

networks:
  job_bot_network:
    driver: bridge